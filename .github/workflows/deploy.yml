name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 123456789
          MYSQL_DATABASE: Phishing
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download spaCy model
      run: |
        python -m spacy download en_core_web_sm

    - name: Initialize Database Schema
      env:
        MYSQL_PWD: 123456789
      run: |
        sudo apt-get install -y mysql-client
        mysql --host=127.0.0.1 --port=3306 -u root -p123456789 Phishing <<EOF
        CREATE TABLE IF NOT EXISTS emails (
          id INT AUTO_INCREMENT PRIMARY KEY,
          sender VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          subject VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          date DATETIME,
          body TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          malicious BOOLEAN,
          time TIME
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        CREATE TABLE IF NOT EXISTS urls (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email_id INT,
          url TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          FOREIGN KEY (email_id) REFERENCES emails(id) ON DELETE CASCADE
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        CREATE TABLE IF NOT EXISTS malurls (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email_id INT,
          url TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          FOREIGN KEY (email_id) REFERENCES emails(id) ON DELETE CASCADE
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        CREATE TABLE IF NOT EXISTS exec_files (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email_id INT,
          file_name TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
          FOREIGN KEY (email_id) REFERENCES emails(id) ON DELETE CASCADE
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        EOF

    - name: Run MailFetch and generate report
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: 123456789
        MYSQL_DATABASE: Phishing
      run: python MailFetch.py

    - name: List files in the directory
      run: ls -la

    - name: Upload report artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: email-report
        path: email_report.csv

    - name: Send report via email
      run: |
        python -c """
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from email.mime.base import MIMEBase
        from email import encoders
        import os

        def send_email_report(filename, recipient_email):
            sender_email = 'priyankapolasi206@gmail.com'
            recipient_email = 'priya.polasi@gmail.com'
            sender_password = os.environ.get('ABCabc012')

            message = MIMEMultipart()
            message['From'] = sender_email
            message['To'] = recipient_email
            message['Subject'] = 'Email Report - Malicious and Non-Malicious Emails'

            body = 'Please find attached the report of processed emails.'
            message.attach(MIMEText(body, 'plain'))

            with open(filename, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {filename}',
                )
                message.attach(part)

            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender_email, sender_password)
            text = message.as_string()
            server.sendmail(sender_email, recipient_email, text)
            server.quit()

        send_email_report('email_report.csv', 'priya.polasi@gmail.com')
        """
